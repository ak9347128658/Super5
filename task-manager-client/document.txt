 how to create a vit project ?
 ans. npm create vite@latest {your-file-name}
===========================================
 Hooks
============
 1. useState
 2.useEffect
 3.useRef
 4.useMemo
 5.useCallback
 6.useReducer

===========================================
Redux-toolkit(state management)
===============================
 0. refer to Basic-redux documentation

 1. npm i redux react-redux @reduxjs/toolkit

 2.import {creactSlice,configureStore} from "@reduxjs/toolkit"
 
 3.import {useSelector,useDispatch} from 'react-redux'

 ============================================
 react-router-dom
 =================
 npm i react-router-dom
 1.import {createBrowserRouter,RouterProvider} from 'react-router-dom';
 


 const router = createBrowserRouter([
   {page='/',element:<Product/>,errorElement:<Error/>, 
    children:[]}
    ]);
 
 2.import {Outlet} from react-router-dom;
  
 rsc=>
   <>
     <ManiNav/>
     <Outlet/>
   </>

 3.import {Link,NavLink} from 'react-router-dom';
  
   <NavLink to='/home' disable={({isActive})=> isActive? true:false} />

 4.import {useParams} from 'react-router-dom';

   rsc=>
    const params = useParams();
   
  Question: form where this useParams() comes ?
  a.
    const router = createBrowserRouter([
     {page='/product/:product', element:<product/> }
      ]);      

 5.<Link to='..' relative='path' />

 6.index=true; where to use ?
   
   const router = CBR([
      {path:'/' ,element :<MainRouter/> , 
        errorElement :<Error/> ,
       children:[
  here==>  {index:true ,element:<Homepage/>},
         {.............},
         {.............}
        ]}
     ]);
  
 7.How to fetchData ?
  
 {page:'/page', element:<page/> , loader:Myloader(),}
  
    export const Myloader = asyn ()=>{
       const response = await fetch(url);
          if(!response.ok){
             // write a logic here for error
             throw json({message:'can't fetch the data'},{status:500}); // form import {json} from 'react-router-dom';
            }
        return response.json() (or) response();
     };

   rsc =>
    import {useLoaderData} 'react-router-dom';
   
    const resData = useLoaderData();     //note: this Loader data can be use within the parent and there children
      
 
  8.import {useNavigation} from 'react-router-dom';  
    //note: this is also related to loader 
  
    const navigation = useNavigation();
   
       <main>
         {navigation.state === 'loading' && <p>loading....</p>}
       </main>
         
     8(a).ErrorPage
        ===========
   import {useRouterError} from 'react-router-dom';
    
    const error = useRouterError();
     
     let title  = 'an error occured..';
     let message = 'something went wrong';

    if(error.status === 500)
        message = 'error.data.message;   

  9.Dynamic value in Loader();

     {path:':eventId', element:<EventDatails/> ,loader : EventDetailLoader}

      const EventDetailLoader = ({request,params})=>{
         const id  = params.eventId;
          fetch('url' + id);
        }

  10.Optional (import {useRouterLoaderData} from 'react-router-dom')
      {path:':eventId', id:'event-detail' ,loader : eventDetailLoader ,
      children :[
        {index:true ,element:<eventDetailpage/> },
        {path:'edit', element:<editEventpage/>}
        ]}


  11.auth (QueryParams  use )
     const [searchParams,setSearchParams] = useSearchParams();
      const isLogin = searchParams.get('mode') === 'login';

  12.Deploying 
    1.testing
    2.Lazy loading (optimizing code)
    example 
     import React,{Suspense} from "react";
     const LazyBlogPage = React.lazy(() => import('./pages/Blog'));
     { index: true, element: <Suspense fallback={<div>Loading...</div>}><LazyBlogPage /></Suspense>,loader: blogloader }
    3.build app for production (npm run build)
    4.hosting 

================================================================================================
tankstack
========
1. installation
  npm i @tanstack/react-query

2.import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from 'react-query/devtools';

const queryClient = new QueryClient();

function App() {
   return (
      <QueryClientProvider client={queryClient}>
         {/* Your components here */}
         <App />
         
         {/* The devtools will only appear in development! */}
         <ReactQueryDevtools initialIsOpen={false} />
      </QueryClientProvider>
   );
}

export default App;


3. import React from 'react';
import { useQuery } from '@tanstack/react-query';

// This is your fetching function
const fetchPosts = async () => {
   const response = await fetch('https://api.example.com/posts');
   
   if (!response.ok) {
       const error = new new Error('Network response was not ok');
       const error.code = await response.status;
       const error.info = await response.json();
      throw error;
   }
   return response.json();
};

function Posts() {
   // Use the useQuery hook to fetch posts
    for update we can use useMutation() also
   const { data: posts, error, isLoading } = useQuery({
     queryKey:['events'],
     queryFn :fetchPosts,
     staleTime:5000  // if neeaded
     //gcTime: 10000 (ms)   //garbage colletor time clean up activity
   });

   if (isLoading) {
      return <span>Loading...</span>;
   }

   if (error) {
      return <span>Error: {error.message}</span>;
   }

   return (
      <div>
         {posts.map(post => (
            <div key={post.id}>
               <h3>{post.title}</h3>
               <p>{post.body}</p>
            </div>
         ))}
      </div>
   );
}

export default Posts;
//

4.  queryClient.invalidateQueries({queryKey:['events']});
 this is used to rerun the data;

5.useMutation
--------------
import {useQueryClient,useMutation} from "@tanstack/react-query";
  const queryClient = useQueryClient();
  const {mutation,isLoaading} = useMutation({
   mutationFn : title =>{
      return wait(1000).then(()=>{
         Posts.push({id: crypto.randomUUID , title});
      }),
     onSuccess : () =>{
      queryClient.invalidateQueries(['posts']);
     }
   }
  });

  onClick={()=>{
   mutation("new post");
  }}

7. staleTime
--------------
const queryClient = QueryClient({
  defaultOptions:{ queries :{staleTime : 1000 * 60 * 5}}
});

  (or)
const postQuert = useQuery({
   queryKey:['posts'],
   queryFn:fetchEvents,
   staleTime:1000                       => in ms
   refetchInterval :1000
   enabled: true or false       => we can specify
});

8.tankstack pagination
------------------------